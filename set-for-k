
 
template<typename T> struct SmartSet {
	multiset<T> big, small;
	T sumBig, sumSmall;
 
	SmartSet() : big(), small(), sumBig(), sumSmall() {}
 
	int size() const {
		return (int)small.size() + (int)big.size();
	}
	void normalizeSmall(int k) {
		k = max(0, min(k, size()));
		while((int)small.size() > k) {
			auto it = prev(small.end());
			sumSmall -= *it;
			sumBig += *it;
			big.insert(*it);
			small.erase(it);
		}
		while((int)small.size() < k) {
			auto it = big.begin();
			sumBig -= *it;
			sumSmall += *it;
			small.insert(*it);
			big.erase(it);
		}
	}
	void insert(T x) {
		if (big.empty() || x < *big.begin()) {
			small.insert(x);
			sumSmall += x;
		} else {
			big.insert(x);
			sumBig += x;
		}
	}
	void erase(T x) {
		if (big.find(x) != big.end()) {
			big.erase(big.find(x));
			sumBig -= x;
		} else if (small.find(x) != small.end()) {
			small.erase(small.find(x));
			sumSmall -= x;
		} else {
			assert(false);
		}
	}
	T getSumSmall(int k) {
		normalizeSmall(k);
		assert((int)small.size() == k);
		return sumSmall;
	}
	T getSumBig(int k) {
		normalizeSmall(size() - k);
		assert((int)big.size() == k);
		return sumBig;
	}
	void clear() {
		sumSmall = sumBig = 0;
		small.clear();
		big.clear();
	}
};
