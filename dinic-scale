struct edge
{
	int a, b, cap, flow;
};
int n;
vector<edge> e;
const int MAXN = 1e4 + 228;
vector<int> g[MAXN];
void addedge(int a, int b, int cap)
{
	g[a].pbc(e.size());
	e.pbc({ a,b,cap,0 });
	g[b].pbc(e.size());
	e.pbc({ b,a,0,0 });
}
int ptr[MAXN];
int d[MAXN];
int s, t;
int y;
bool bfs()
{
	fill(d, d + MAXN, inf);
	queue<int> q;
	q.push(s);
	d[s] = 0;
	while (q.size())
	{
		int v = q.front();
		q.pop();
		for (int i : g[v])
		{
			int u = e[i].b;
			if (d[u] > d[v] + 1 && e[i].cap > e[i].flow && e[i].cap - e[i].flow >= y)
			{
				d[u] = d[v] + 1;
				q.push(u);
			}
		}
	}
	return d[t] < inf;
}
int dfs(int v, int flow)
{
	if (!flow) return 0;
	if (v == t) return flow;
	int res = 0;
	for (; ptr[v] < g[v].size(); ++ptr[v])
	{
		int id = g[v][ptr[v]];
		if (d[e[id].b] != d[v] + 1) continue;
		if (e[id].cap - e[id].flow < y) continue;
		int x = min(flow, e[id].cap - e[id].flow);
		int xy = dfs(e[id].b, x);
		e[id].flow += xy;
		e[id ^ 1].flow -= xy;
		res += xy;
		flow -= xy;
		if (!flow) break;
	}
	return res;
}
int dinic()
{
	ll res = 0;
	for (y = (1 << 30); y >= 1; y >>= 1)
	{
		while (bfs())
		{
			memset(ptr, 0, sizeof ptr);
			int x = dfs(s, 1e9);
			res += x;
			if (!x)break;
		}
	}

	return res;
}
