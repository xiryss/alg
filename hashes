
const int MODS = 2;
struct Hasher {
	vector<vector<int>> h, rh, p, ip;

	vector<int> mods;
	string s;
	vector<int> base;
	bool check(int x) {
		for (int i = 2; i * i <= x; ++i) {
			if (x % i == 0) return 0;
		}
		return 1;
	}
	inline int mul(int a, int b, int mod) {
		return 1ll * a * b % mod;
	}
	inline int add(int a, int b, int mod) {
		if (a + b >= mod) return a + b - mod;
		return a + b;
	}
	inline int sub(int a, int b, int mod) {
		if (a - b < 0) return a - b + mod;
		return a - b;
	}
	inline int binpow(int a, int b, int mod) {
		int res = 1;
		while (b) {
			if (b & 1)res = mul(res, a, mod);
			a = mul(a, a, mod);
			b >>= 1;
		}
		return res;
	}
	int inv(int x, int mod) {
		return binpow(x, mod - 2, mod);
	}
	Hasher() {}
	void init(string tt) {
		s = tt;
		mods.resize(MODS);
		base.resize(MODS);
		for (int j = 0; j < MODS; ++j) {
			mods[j] = rnd() % (int)1e8 + 1e8;
			while (!check(mods[j]))++mods[j];
		}
		p.resize(s.size(), vector<int> (MODS));
		ip.resize(s.size(), vector<int>(MODS));
		h.resize(s.size(), vector<int> (MODS));
		rh.resize(s.size(), vector<int> (MODS));
		for (int j = 0; j < MODS; ++j) p[0][j] = ip[0][j] = 1, base[j] = rnd() % (int)1e4 + 228;
		for (int i = 1; i < s.size(); ++i)for (int j = 0; j < MODS; ++j) p[i][j] = mul(p[i - 1][j], base[j], mods[j]);
		for (int j = 0; j < MODS; ++j)ip[1][j] = inv(base[j], mods[j]);
		for (int i = 2; i < s.size(); ++i)for (int j = 0; j < MODS; ++j) ip[i][j] = mul(ip[i - 1][j], ip[1][j], mods[j]);
		for (int i = 0; i < s.size(); ++i) {
			for (int j = 0; j < MODS; ++j) {
				h[i][j] = mul(s[i], p[i][j], mods[j]);
				if (i) {
					h[i][j] = add(h[i - 1][j], h[i][j], mods[j]);
				}
			}
		}
		for (int i = s.size() - 1; i >= 0; --i) {
			for (int j = 0; j < MODS; ++j) {
				rh[i][j] = mul(s[i], p[s.size() - i - 1][j], mods[j]);
				if (i + 1 < s.size()) {
					rh[i][j] = add(rh[i][j], rh[i + 1][j], mods[j]);
				}
			}
		}
	}
	bool pal(int l, int r) {
		for (int i = 0; i < MODS; ++i) {
			int fs;
			fs = sub(h[r][i], (l == 0 ? 0 : h[l - 1][i]), mods[i]);
			fs = mul(fs, ip[l][i], mods[i]);
			int ss;
			ss = sub(rh[l][i], (r + 1 == s.size() ? 0 : rh[r + 1][i]), mods[i]);
			ss = mul(ss, ip[s.size() - r - 1][i], mods[i]);
			if (fs != ss) return 0;
		}
		return 1;
	}
};
